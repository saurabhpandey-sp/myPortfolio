{"ast":null,"code":"//import React from \"react\";\n//import { useEffect } from \"react\";\n//import { useContext , useState} from \"react\";\n//context api\n//context hooks\n//context(warehouse)   // ye data ghr\n//Provider             //  ye phuchane wala \n//Consumer   (useContext())   // ye consumer\n//const API_URL = `http://omdbapi.com/?apikey=b864d43e&s=titanic`\n//const AppContext = React.createContext();\n//we need to create a provider function\n//const AppProvider = ({children}) => {\n//const [isLoading, setIsLoading] = useState(true);\n//const [movie, setMovie] = useState([]);\n//const[isError, setIsError] = useState({ show: \"false\", msg: \"\"});\n//const getMovies = async (url) => {\n//try{\n//const res = await fetch(url);\n//const data = await res.json();\n//console.log(data);\n//if (data.Response === \"True\") {\n//setIsLoading(false);\n//setMovie(data.search);\n//} else {\n//setIsError({\n//show: true,\n//msg: data.error,\n//});\n//}\n//} catch(error) {\n//console.log(error);\n//}\n//};\n//useEffect(() => {\n//getMovies(API_URL);\n//}, []);\n//return(<AppContext.Provider value={{ isLoading, isError , movie}}>{children}</AppContext.Provider>\n//)\n//};\n// here instead of saurabh u can use objects also like api\n//const useGlobalContext = () => {\n//return useContext(AppContext);\n//}\n// global custom hooks\n//export default AppProvider ;\n//export {AppContext, useGlobalContext};","map":{"version":3,"names":[],"sources":["C:/Users/DELL/my-app/src/context.js"],"sourcesContent":["//import React from \"react\";\r\n//import { useEffect } from \"react\";\r\n//import { useContext , useState} from \"react\";\r\n\r\n//context api\r\n//context hooks\r\n\r\n//context(warehouse)   // ye data ghr\r\n//Provider             //  ye phuchane wala \r\n//Consumer   (useContext())   // ye consumer\r\n\r\n//const API_URL = `http://omdbapi.com/?apikey=b864d43e&s=titanic`\r\n\r\n//const AppContext = React.createContext();\r\n\r\n//we need to create a provider function\r\n//const AppProvider = ({children}) => {\r\n\r\n    //const [isLoading, setIsLoading] = useState(true);\r\n    //const [movie, setMovie] = useState([]);\r\n    //const[isError, setIsError] = useState({ show: \"false\", msg: \"\"});\r\n\r\n    //const getMovies = async (url) => {\r\n        //try{\r\n            //const res = await fetch(url);\r\n            //const data = await res.json();\r\n            //console.log(data);\r\n            //if (data.Response === \"True\") {\r\n                //setIsLoading(false);\r\n                //setMovie(data.search);\r\n            //} else {\r\n                //setIsError({\r\n                    //show: true,\r\n                    //msg: data.error,\r\n                //});\r\n            //}\r\n        //} catch(error) {\r\n            //console.log(error);\r\n        //}\r\n    //};\r\n\r\n    //useEffect(() => {\r\n        //getMovies(API_URL);\r\n    //}, []);\r\n\r\n    //return(<AppContext.Provider value={{ isLoading, isError , movie}}>{children}</AppContext.Provider>\r\n    //)\r\n//};\r\n\r\n// here instead of saurabh u can use objects also like api\r\n \r\n //const useGlobalContext = () => {\r\n    //return useContext(AppContext);\r\n //}\r\n// global custom hooks\r\n\r\n//export default AppProvider ;\r\n//export {AppContext, useGlobalContext};"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEI;AACA;AACA;AAEA;AACI;AACI;AACA;AACA;AACA;AACI;AACA;AACJ;AACI;AACI;AACA;AACJ;AACJ;AACJ;AACI;AACJ;AACJ;AAEA;AACI;AACJ;AAEA;AACA;AACJ;AAEA;AAEC;AACG;AACH;AACD;AAEA;AACA"},"metadata":{},"sourceType":"module"}