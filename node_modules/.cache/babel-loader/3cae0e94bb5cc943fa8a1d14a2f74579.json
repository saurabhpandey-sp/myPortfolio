{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\my-app\\\\src\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useContext, useState } from \"react\"; //context api\n//context hooks\n//context(warehouse)   // ye data ghr\n//Provider             //  ye phuchane wala \n//Consumer   (useContext())   // ye consumer\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = `http://omdbapi.com/?apikey=b864d43e&s=titanic`;\nconst AppContext = /*#__PURE__*/React.createContext(); //we need to create a provider function\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isLoading, setIsLoading] = useState(true);\n  const [movie, setMovie] = useState([]);\n  const [isError, setIsError] = useState({\n    show: \"false\",\n    msg: \"\"\n  });\n\n  const getMovies = async url => {\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(data);\n\n      if (data.Response === \"True\") {\n        setsLoading(false);\n        setMovie(data.search);\n      } else {\n        setIsError({\n          show: true,\n          msg: data.error\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getMovies(API_URL);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      isLoading,\n      isError,\n      movie\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n}; // here instead of saurabh u can use objects also like api\n\n\n_s(AppProvider, \"tYuaZZ12TU1DGWcvUcXlhOmQ52g=\");\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n}; // global custom hooks\n\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default AppProvider;\nexport { AppContext, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","useEffect","useContext","useState","API_URL","AppContext","createContext","AppProvider","children","isLoading","setIsLoading","movie","setMovie","isError","setIsError","show","msg","getMovies","url","res","fetch","data","json","console","log","Response","setsLoading","search","error","useGlobalContext"],"sources":["C:/Users/DELL/my-app/src/context.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useContext , useState} from \"react\";\r\n\r\n//context api\r\n//context hooks\r\n\r\n//context(warehouse)   // ye data ghr\r\n//Provider             //  ye phuchane wala \r\n//Consumer   (useContext())   // ye consumer\r\n\r\nconst API_URL = `http://omdbapi.com/?apikey=b864d43e&s=titanic`\r\n\r\nconst AppContext = React.createContext();\r\n\r\n//we need to create a provider function\r\nconst AppProvider = ({children}) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [movie, setMovie] = useState([]);\r\n    const[isError, setIsError] = useState({ show: \"false\", msg: \"\"});\r\n\r\n    const getMovies = async (url) => {\r\n        try{\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            console.log(data);\r\n            if (data.Response === \"True\") {\r\n                setsLoading(false);\r\n                setMovie(data.search);\r\n            } else {\r\n                setIsError({\r\n                    show: true,\r\n                    msg: data.error,\r\n                });\r\n            }\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMovies(API_URL);\r\n    }, []);\r\n\r\n    return(<AppContext.Provider value={{ isLoading, isError , movie}}>{children}</AppContext.Provider>\r\n    )\r\n};\r\n\r\n// here instead of saurabh u can use objects also like api\r\n \r\n const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n }\r\n// global custom hooks\r\n\r\nexport default AppProvider ;\r\nexport {AppContext, useGlobalContext};"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,EAAsBC,QAAtB,QAAqC,OAArC,C,CAEA;AACA;AAEA;AACA;AACA;;;AAEA,MAAMC,OAAO,GAAI,+CAAjB;AAEA,MAAMC,UAAU,gBAAGL,KAAK,CAACM,aAAN,EAAnB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EAEhC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAK,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC;IAAEY,IAAI,EAAE,OAAR;IAAiBC,GAAG,EAAE;EAAtB,CAAD,CAArC;;EAEA,MAAMC,SAAS,GAAG,MAAOC,GAAP,IAAe;IAC7B,IAAG;MACC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;MACA,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;MACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ;;MACA,IAAIA,IAAI,CAACI,QAAL,KAAkB,MAAtB,EAA8B;QAC1BC,WAAW,CAAC,KAAD,CAAX;QACAd,QAAQ,CAACS,IAAI,CAACM,MAAN,CAAR;MACH,CAHD,MAGO;QACHb,UAAU,CAAC;UACPC,IAAI,EAAE,IADC;UAEPC,GAAG,EAAEK,IAAI,CAACO;QAFH,CAAD,CAAV;MAIH;IACJ,CAbD,CAaE,OAAMA,KAAN,EAAa;MACXL,OAAO,CAACC,GAAR,CAAYI,KAAZ;IACH;EACJ,CAjBD;;EAmBA3B,SAAS,CAAC,MAAM;IACZgB,SAAS,CAACb,OAAD,CAAT;EACH,CAFQ,EAEN,EAFM,CAAT;EAIA,oBAAO,QAAC,UAAD,CAAY,QAAZ;IAAqB,KAAK,EAAE;MAAEK,SAAF;MAAaI,OAAb;MAAuBF;IAAvB,CAA5B;IAAA,UAA4DH;EAA5D;IAAA;IAAA;IAAA;EAAA,QAAP;AAEH,CA/BD,C,CAiCA;;;GAjCMD,W;;KAAAA,W;;AAmCL,MAAMsB,gBAAgB,GAAG,MAAM;EAAA;;EAC5B,OAAO3B,UAAU,CAACG,UAAD,CAAjB;AACF,CAFD,C,CAGD;;;IAHOwB,gB;;AAKP,eAAetB,WAAf;AACA,SAAQF,UAAR,EAAoBwB,gBAApB"},"metadata":{},"sourceType":"module"}