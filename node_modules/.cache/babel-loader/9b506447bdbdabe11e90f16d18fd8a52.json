{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\my-app\\\\src\\\\context.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContext } from \"react\"; //context api\n//context hooks\n//context(warehouse)   // ye data ghr\n//Provider             //  ye phuchane wala \n//Consumer   (useContext())   // ye consumer\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = `http://omdbapi.com/?apikey=727bbdc1&s=titanic`;\nconst AppContext = /*#__PURE__*/React.createContext(); //we need to create a provider function\n\nconst AppProvider = _ref => {\n  let {\n    children\n  } = _ref;\n\n  const getMovies = async url => {\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: \"Saurabh\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 12\n  }, this);\n}; // here instead of saurabh u can use objects also like api\n\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s();\n\n  return useContext(AppContext);\n}; // global custom hooks\n\n\n_s(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default AppProvider;\nexport { AppContext, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","useContext","API_URL","AppContext","createContext","AppProvider","children","getMovies","url","res","fetch","data","json","error","console","log","useGlobalContext"],"sources":["C:/Users/DELL/my-app/src/context.js"],"sourcesContent":["import React from \"react\";\r\nimport { useContext } from \"react\";\r\n//context api\r\n//context hooks\r\n\r\n//context(warehouse)   // ye data ghr\r\n//Provider             //  ye phuchane wala \r\n//Consumer   (useContext())   // ye consumer\r\n\r\nconst API_URL = `http://omdbapi.com/?apikey=727bbdc1&s=titanic`\r\n\r\nconst AppContext = React.createContext();\r\n\r\n//we need to create a provider function\r\nconst AppProvider = ({children}) => {\r\n    const getMovies = async (url) => {\r\n        try{\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            \r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return <AppContext.Provider value=\"Saurabh\">{children}</AppContext.Provider>\r\n};\r\n\r\n// here instead of saurabh u can use objects also like api\r\n \r\n const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n }\r\n// global custom hooks\r\n\r\nexport default AppProvider ;\r\nexport {AppContext, useGlobalContext};"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B,C,CACA;AACA;AAEA;AACA;AACA;;;AAEA,MAAMC,OAAO,GAAI,+CAAjB;AAEA,MAAMC,UAAU,gBAAGH,KAAK,CAACI,aAAN,EAAnB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,QAAgB;EAAA,IAAf;IAACC;EAAD,CAAe;;EAChC,MAAMC,SAAS,GAAG,MAAOC,GAAP,IAAe;IAC7B,IAAG;MACC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;MACA,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;IAEH,CAJD,CAIE,OAAMC,KAAN,EAAa;MACXC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ,CARD;;EAUA,oBAAO,QAAC,UAAD,CAAY,QAAZ;IAAqB,KAAK,EAAC,SAA3B;IAAA,UAAsCP;EAAtC;IAAA;IAAA;IAAA;EAAA,QAAP;AACH,CAZD,C,CAcA;;;KAdMD,W;;AAgBL,MAAMW,gBAAgB,GAAG,MAAM;EAAA;;EAC5B,OAAOf,UAAU,CAACE,UAAD,CAAjB;AACF,CAFD,C,CAGD;;;GAHOa,gB;;AAKP,eAAeX,WAAf;AACA,SAAQF,UAAR,EAAoBa,gBAApB"},"metadata":{},"sourceType":"module"}